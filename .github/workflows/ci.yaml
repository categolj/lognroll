name: CI
on:
  push:
    branches:
    - main
    paths:
    - src/**
    - ui/**
    - pom.xml
    - .github/workflows/*
  pull_request:
    branches:
    - main
    paths:
    - src/**
    - ui/**
    - pom.xml
    - .github/workflows/*
  workflow_dispatch:
jobs:
  test:
    uses: making/workflows/.github/workflows/maven-unit-test.yaml@main
    with:
      e2e_test: true
      test_url_1: http://localhost:8080/actuator/health
  build-jvm-image:
    needs: test
    uses: making/workflows/.github/workflows/build-docker-image-maven-jvm.yaml@main
    with:
      image_file: image.yaml
  build-native-image:
    needs: test
    uses: making/workflows/.github/workflows/build-docker-image-maven-native.yaml@main
    with:
      image_file: image_native.yaml
      e2e_test: true
      test_url_1: http://localhost:8080/actuator/health
      # TODO how to test?
      #  cat src/test/resources/logs.json | curl -H "Content-Type: application/json" -H "Authorization: Bearer changeme" --fail --show-error --silent http://localhost:8080/v1/logs --data-binary @- -v
      #  curl -s http://localhost:8080/api/logs -H "Authorization: Bearer changeme" | jq .
  deploy-to-fly:
    needs: build-native-image
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
    - uses: actions/checkout@v4
    - name: Import Secrets
      if: github.ref == 'refs/heads/main'
      id: secrets
      uses: hashicorp/vault-action@v3.0.0
      with:
        exportToken: true
        exportEnv: true
        method: jwt
        url: ${{ secrets.VAULT_ADDR }}
        role: cicd
        secrets: |
          kv/data/cicd/fly api_token | FLY_API_TOKEN
    - name: Install Fly
      if: github.ref == 'refs/heads/main'
      uses: superfly/flyctl-actions/setup-flyctl@master
    - name: Deploy to Fly
      if: github.ref == 'refs/heads/main'
      run: |
        cat <<'EOF' > fly.toml
        [build]
        image = "ghcr.io/making/lognroll:native"
        
        [[services]]
        internal_port = 8080
        protocol = "tcp"
        
        [[services.ports]]
        handlers = ["http"]
        port = "80"
        
        [[services.ports]]
        handlers = ["tls", "http"]
        port = "443"
        
        [[services.http_checks]]
        port = 8080
        interval = 5000
        grace_period = "5s"
        method = "get"
        path = "/actuator/health"
        protocol = "http"
        timeout = 5000
        
        [metrics]
        port = 8080
        path = "/actuator/prometheus"
        
        [mounts]
        source="lognroll_data"
        destination="/var/lognroll"
        
        [env]
        "spring.application.name" = "${FLY_APP_NAME}"
        "server.port" = "8080"
        "lognroll.db.path" = "/var/lognroll/lognroll.db"
        EOF
        flyctl apps create --name lognroll --machines || true
        flyctl deploy -a lognroll --ha=false