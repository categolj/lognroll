name: CI
on:
  push:
    branches:
    - main
    paths:
    - src/**
    - ui/**
    - pom.xml
    - .github/workflows/*
  pull_request:
    branches:
    - main
    paths:
    - src/**
    - ui/**
    - pom.xml
    - .github/workflows/*
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
    - uses: actions/checkout@v4
    - name: Install GraalVM
      uses: graalvm/setup-graalvm@v1
      with:
        java-version: '21'
        distribution: 'graalvm'
        cache: 'maven'
        github-token: ${{ secrets.GITHUB_TOKEN }}
    - name: Unit Tests
      run: ./mvnw -V --no-transfer-progress clean test
    - name: Executable Jar
      run: |
        set -e
        ./mvnw -V --no-transfer-progress package -DskipTests
        java -jar target/*.jar &
        .github/workflows/wait.sh
        curl --fail --show-error --silent http://localhost:4318/actuator/health
        cat src/test/resources/logs.json | curl -H "Content-Type: application/json" -H "Authorization: Bearer changeme" --fail --show-error --silent http://localhost:4318/v1/logs --data-binary @- -v
        curl -s http://localhost:4318/api/logs -H "Authorization: Bearer changeme" | jq .
        pkill -KILL java
    - name: Import Secrets
      if: github.ref == 'refs/heads/main'
      id: secrets
      uses: hashicorp/vault-action@v3.0.0
      with:
        exportToken: true
        exportEnv: true
        method: jwt
        url: ${{ secrets.VAULT_ADDR }}
        role: cicd
        secrets: |
          kv/data/cicd/github api_token | GITHUB_API_TOKEN ;
          kv/data/cicd/fly api_token | FLY_API_TOKEN
    - name: Docker Login
      if: github.ref == 'refs/heads/main'
      run: docker login ghcr.io -u ${GITHUB_REPOSITORY_OWNER} -p ${GITHUB_API_TOKEN}
    - name: Build Docker Image (JVM)
      if: github.ref == 'refs/heads/main'
      run: |
        set -e
        ./mvnw -V --no-transfer-progress spring-boot:build-image -DskipTests -Dspring-boot.build-image.imageName=ghcr.io/${GITHUB_REPOSITORY}:jvm
    - name: Build Docker Image (Native)
      if: github.ref == 'refs/heads/main'
      run: |
        set -e
        ./mvnw -V --no-transfer-progress spring-boot:build-image -Pnative -DskipTests -Dspring-boot.build-image.imageName=ghcr.io/${GITHUB_REPOSITORY}:native
    - name: Docker Push
      if: github.ref == 'refs/heads/main'
      run: |
        set -e
        docker push ghcr.io/${GITHUB_REPOSITORY}:jvm
        docker push ghcr.io/${GITHUB_REPOSITORY}:native
    - name: Install Fly
      if: github.ref == 'refs/heads/main'
      uses: superfly/flyctl-actions/setup-flyctl@master
    - name: Deploy to Fly
      if: github.ref == 'refs/heads/main'
      run: |
        cat <<'EOF' > fly.toml
        [build]
        image = "ghcr.io/making/lognroll:native"
        
        [[services]]
        internal_port = 8080
        protocol = "tcp"
        
        [[services.ports]]
        handlers = ["http"]
        port = "80"
        
        [[services.ports]]
        handlers = ["tls", "http"]
        port = "443"
        
        [[services.http_checks]]
        port = 8080
        interval = 5000
        grace_period = "5s"
        method = "get"
        path = "/actuator/health"
        protocol = "http"
        timeout = 5000
        
        [metrics]
        port = 8080
        path = "/actuator/prometheus"
        
        [mounts]
        source="lognroll_data"
        destination="/var/lognroll"
        
        [env]
        "spring.application.name" = "${FLY_APP_NAME}"
        "server.port" = "8080"
        "lognroll.db.path" = "/var/lognroll/lognroll.db"
        EOF
        flyctl apps create --name lognroll --machines || true
        flyctl deploy -a lognroll --ha=false